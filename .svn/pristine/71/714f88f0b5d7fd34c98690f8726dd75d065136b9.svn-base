#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <csse2310a1.h>
#include <ctype.h>

#include "main.h"

#define LENGTH_FLAG "-len"
#define MAX_FLAG "-max"
#define FILE_PREFIX_DOT '.'
#define FILE_PREFIX_SLASH '/'
#define DEFAULT_GUESSES 6
#define DEFAULT_WORD_LENGTH 5
#define GUESS_MAX_LENGTH 50 

#define HIDDEN_LETTER '-'

int main(int argc, char const *argv[]) {
  // Checking command line arguments
  // Checking number of arguments given is in bounds
  if (argc > 6) {
    fprintf(stderr, "Too many command line arguments specified.");
    return -1;
  }

  // Checking individual arguments
  int len=0, max=0;
  FILE* wordList=NULL;

  for (int i = 1; i < argc; i++) {
    if (!argv[i]) {
      fprintf(stderr, "Cannot give whitespace as comamnd.\n");
      return -1;
    }

    // -len flag checks
    if (strcmp(argv[i], LENGTH_FLAG) == 0) {
      if (len) {
        fprintf(stderr, "Cannot have '-len' flag twice.\n");
        return -1;
      }

      // Checking there is an argument after the '-len' flag
      if (!((i + 1) < argc)) {
        fprintf(stderr, "There must be an argument after the '-len' flag.\n");
        return -1;
      }

      len = atoi(argv[++i]);
      if (len < 3 || len > 9) {
        fprintf(stderr, "Argument after '-len' must be between 3 and 9 "
          "inclusive.\n");
        return -1;
      } 

    // -max flag checks
    } else if (strcmp(argv[i], MAX_FLAG) == 0) {
      if (max) {
        fprintf(stderr, "Cannot have '-max' flag twice.\n");
        return -1;
      }

      // Checking there is an argument after the '-max' flag
      if (!((i + 1) < argc)) {
        fprintf(stderr, "There must be an argument after the '-len' flag.\n");
        return -1;
      }

      max = atoi(argv[++i]);
      if (max < 3 || max > 9) {
        fprintf(stderr, "Argument after '-max' must be between 3 and 9 "
          "inclusive.\n");
        return -1;
      }

    // wordList argument checking
    // Checking the dictonary path begins with '.' or '/'.
    } else if ((strchr(argv[i], FILE_PREFIX_DOT) != NULL) || (strchr(argv[i], 
      FILE_PREFIX_SLASH) != NULL)) {
      wordList = fopen(argv[i], "r");

      // Checking exists and can be read
      if (wordList == NULL) {
        fprintf(stderr, "dictionary file \"%s\" cannot be opened\n", argv[i]);
        return 2;
      }

    // Checking all other arguments passed
    } else {
      fprintf(stderr, "Usage: wordle [-len word-length] [-max max-guesses] "
      "[dictionary]\n");
      return 1;
    }
  }
  
  init_game(len, max, wordList);
  return 1;
}

int init_game(int wordLen, int maxGuesses, FILE* dictionary) {
  // If '-len' flag not specified, setting word length to default of 5
  int length = (wordLen == 0) ? DEFAULT_WORD_LENGTH : wordLen;
  // If '-len' flag not specified, setting word length to default of 6
  int attemptsRemaining = (maxGuesses == 0) ? DEFAULT_GUESSES : maxGuesses;

  char* answer = get_random_word(length);
  char guess[GUESS_MAX_LENGTH];

  printf("DEBUG answer: %s\n", answer);
  
  printf("Welcome to Wordle!\n");
  while (attemptsRemaining > 0) {
    // Printing appropriate prompt message
    if (attemptsRemaining == 1) {
      printf("Enter a %d letter word (last attempt):\n", length);
    } else {
      printf("Enter a %d letter word (%d attempts remaining):\n", length, 
        attemptsRemaining);
    }

    // Getting user input and checking is not EOF
    if (scanf("%s", guess) == EOF) {
      fprintf(stderr, "Bad luck - the word is \"%s\".\n", answer);
      exit(3);
    }

    // Checking 'guess' contains only alphabetical characters
    if (!is_alphabetical(guess)) {
      printf("Words must contain only letters - try again.\n");
      continue;
    }

    // Checking 'guess' is of the correct length
    if (strlen(guess) != length) {
      printf("Words must be %d letters long - try again.\n", length);
      continue;
    };

    // Ensuring guess is case insensitive
    to_lower_word(guess);



    // Exiting if 'guess' contains the correct word
    if (strcmp(guess, answer) == 0) {
      printf("Correct!\n");
      exit(0);
    }

    attemptsRemaining--;
  }

  // Exiting if user has reached the max number of attempts
  fprintf(stderr, "Bad luck - the word is \"%s\".\n", answer);
  exit(3);
}

int is_alphabetical(char string[]) {
  int length = strlen(string);
  for (int i=0; i<length; i++) {
    if (isalpha(string[i]) == 0) {
      return 0;
    }
  }
  return 1;
}

void to_lower_word(char *guess) {
  for (int i=0; guess[i]; i++) {
    guess[i] = tolower(guess[i]);
  }
}

// void match_letters(char *answer, char *guess) {
//   return 0;
// }